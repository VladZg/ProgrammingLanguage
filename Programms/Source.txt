                               \\ <---- input/output started here
                               \\ <-- var a initialization started
PUSH 0
POP [0 + vars_start]           \\ <-- var a initialized
PIN
POP [0 + vars_start]           \\ <-- standart scanf in var a
                               \\ <---- input/output finished here

                               \\ <---- input/output started here
                               \\ <-- var b initialization started
PUSH 0
POP [1 + vars_start]           \\ <-- var b initialized
PIN
POP [1 + vars_start]           \\ <-- standart scanf in var b
                               \\ <---- input/output finished here

                               \\ <---- input/output started here
                               \\ <-- var c initialization started
PUSH 0
POP [2 + vars_start]           \\ <-- var c initialized
PIN
POP [2 + vars_start]           \\ <-- standart scanf in var c
                               \\ <---- input/output finished here

                               \\ <---- var initialization started here
                               \\ <-- var x1 initialization started
PUSH 0
POP [3 + vars_start]           \\ <-- var x1 initialized
                               \\ <---- var initialization finished here

                               \\ <---- var initialization started here
                               \\ <-- var x2 initialization started
PUSH 0
POP [4 + vars_start]           \\ <-- var x2 initialized
                               \\ <---- var initialization finished here

                               \\ <---- var initialization started here
                               \\ <-- var n_roots initialization started
PUSH 0
POP [5 + vars_start]           \\ <-- var n_roots initialized
                               \\ <---- var initialization finished here

                               \\ <---- var initialization started here
                               \\ <-- var d initialization started
PUSH 0
POP [6 + vars_start]           \\ <-- var d initialized
                               \\ <---- var initialization finished here

                               \\ <---- var initialization started here
                               \\ <-- var sqrt_d initialization started
PUSH 0
POP [7 + vars_start]           \\ <-- var sqrt_d initialized
                               \\ <---- var initialization finished here

                               \\ <---- function initialization started here
JMP :skip_func_SquareSolver_def
func_SquareSolver:             \\ <-- function SquareSolver initialization
                               \\ <---- assignment started here
PUSH 0
POP [5 + vars_start]           \\ var's n_roots value changed
                               \\ <---- assignment finished here

                               \\ <---- assignment started here
PUSH [1 + vars_start]          \\ var b
PUSH [1 + vars_start]          \\ var b
MUL                            \\ MULING
PUSH 4
PUSH [0 + vars_start]          \\ var a
MUL                            \\ MULING
PUSH [2 + vars_start]          \\ var c
MUL                            \\ MULING
SUB                            \\ SUBING
POP [6 + vars_start]           \\ var's d value changed
                               \\ <---- assignment finished here

                               \\ <---- if construction started here
PUSH [0 + vars_start]          \\ var a
PUSH 0
JE :if_block_0x6040000025d0
JMP :else_block_0x6040000025d0

if_block_0x6040000025d0:       \\ <-- the beginning ob if block
                               \\ <---- if construction started here
PUSH [1 + vars_start]          \\ var b
PUSH 0
JE :if_block_0x6040000013d0
JMP :else_block_0x6040000013d0

if_block_0x6040000013d0:       \\ <-- the beginning ob if block
                               \\ <---- if construction started here
PUSH [2 + vars_start]          \\ var c
PUSH 0
JE :if_block_0x604000000f50
JMP :else_block_0x604000000f50

if_block_0x604000000f50:       \\ <-- the beginning ob if block
                               \\ <---- function return statement starts here
PUSH 133722869
RET                            \\<--- function return statement
JMP :endif_0x604000000f50

else_block_0x604000000f50:     \\ <-- the beginning ob else block
                               \\ <---- function return statement starts here
PUSH 0
RET                            \\<--- function return statement
JMP :endif_0x604000000f50

endif_0x604000000f50:          \\ <-- continuation after conditional block
                               \\ <---- if construction finished here

JMP :endif_0x6040000013d0

else_block_0x6040000013d0:     \\ <-- the beginning ob else block
                               \\ <---- assignment started here
PUSH 0
PUSH [2 + vars_start]          \\ var c
SUB                            \\ SUBING
PUSH [1 + vars_start]          \\ var b
DIV                            \\ DIVING
POP [3 + vars_start]           \\ var's x1 value changed
                               \\ <---- assignment finished here

                               \\ <---- assignment started here
PUSH [3 + vars_start]          \\ var x1
POP [4 + vars_start]           \\ var's x2 value changed
                               \\ <---- assignment finished here

                               \\ <---- function return statement starts here
PUSH 1
RET                            \\<--- function return statement
JMP :endif_0x6040000013d0

endif_0x6040000013d0:          \\ <-- continuation after conditional block
                               \\ <---- if construction finished here

JMP :endif_0x6040000025d0

else_block_0x6040000025d0:     \\ <-- the beginning ob else block
                               \\ <---- assignment started here
PUSH [6 + vars_start]          \\ var d
SQRT                           \\ SQRTING
POP [7 + vars_start]           \\ var's sqrt_d value changed
                               \\ <---- assignment finished here

                               \\ <---- if construction started here
PUSH [6 + vars_start]          \\ var d
PUSH 0
JA :if_block_0x6040000024d0
JMP :else_block_0x6040000024d0

if_block_0x6040000024d0:       \\ <-- the beginning ob if block
                               \\ <---- assignment started here
PUSH [6 + vars_start]          \\ var d
SQRT                           \\ SQRTING
POP [7 + vars_start]           \\ var's sqrt_d value changed
                               \\ <---- assignment finished here

                               \\ <---- assignment started here
PUSH 0
PUSH [1 + vars_start]          \\ var b
SUB                            \\ SUBING
PUSH [7 + vars_start]          \\ var sqrt_d
ADD                            \\ ADDING
PUSH 2
PUSH [0 + vars_start]          \\ var a
MUL                            \\ MULING
DIV                            \\ DIVING
POP [3 + vars_start]           \\ var's x1 value changed
                               \\ <---- assignment finished here

                               \\ <---- assignment started here
PUSH 0
PUSH [1 + vars_start]          \\ var b
SUB                            \\ SUBING
PUSH [7 + vars_start]          \\ var sqrt_d
SUB                            \\ SUBING
PUSH 2
PUSH [0 + vars_start]          \\ var a
MUL                            \\ MULING
DIV                            \\ DIVING
POP [4 + vars_start]           \\ var's x2 value changed
                               \\ <---- assignment finished here

                               \\ <---- function return statement starts here
PUSH 2
RET                            \\<--- function return statement
JMP :endif_0x6040000024d0

else_block_0x6040000024d0:     \\ <-- the beginning ob else block
                               \\ <---- if construction started here
PUSH [6 + vars_start]          \\ var d
PUSH 0
JE :if_block_0x604000002410
JMP :else_block_0x604000002410

if_block_0x604000002410:       \\ <-- the beginning ob if block
                               \\ <---- assignment started here
PUSH 0
PUSH [1 + vars_start]          \\ var b
SUB                            \\ SUBING
PUSH 2
PUSH [0 + vars_start]          \\ var a
MUL                            \\ MULING
DIV                            \\ DIVING
POP [3 + vars_start]           \\ var's x1 value changed
                               \\ <---- assignment finished here

                               \\ <---- assignment started here
PUSH [3 + vars_start]          \\ var x1
POP [4 + vars_start]           \\ var's x2 value changed
                               \\ <---- assignment finished here

                               \\ <---- function return statement starts here
PUSH 1
RET                            \\<--- function return statement
JMP :endif_0x604000002410

else_block_0x604000002410:     \\ <-- the beginning ob else block
                               \\ <---- function return statement starts here
PUSH 0
RET                            \\<--- function return statement
JMP :endif_0x604000002410

endif_0x604000002410:          \\ <-- continuation after conditional block
                               \\ <---- if construction finished here

JMP :endif_0x6040000024d0

endif_0x6040000024d0:          \\ <-- continuation after conditional block
                               \\ <---- if construction finished here

JMP :endif_0x6040000025d0

endif_0x6040000025d0:          \\ <-- continuation after conditional block
                               \\ <---- if construction finished here


skip_func_SquareSolver_def:
                               \\ <---- function initialization finished here

                               \\ <---- while started here
while_0x604000003650:
JMP :while_block_0x604000003650
JMP :while_else_0x604000003650

while_block_0x604000003650:    \\ <-- the beginning ob while block
                               \\ <---- assignment started here
CALL :func_SquareSolver        \\ <--- function SquareSolver call
POP [5 + vars_start]           \\ var's n_roots value changed
                               \\ <---- assignment finished here

                               \\ <---- input/output started here
PUSH [5 + vars_start]          \\ var n_roots
OUT                            \\ <-- standart printf

                               \\ <---- input/output finished here

                               \\ <---- if construction started here
PUSH [5 + vars_start]          \\ var n_roots
PUSH 0
JE :if_block_0x604000003250
JMP :else_block_0x604000003250

if_block_0x604000003250:       \\ <-- the beginning ob if block
                               \\ <---- input/output started here
PUSH 0
OUT                            \\ <-- standart printf

                               \\ <---- input/output finished here

JMP :endif_0x604000003250

else_block_0x604000003250:     \\ <-- the beginning ob else block
                               \\ <---- if construction started here
PUSH [5 + vars_start]          \\ var n_roots
PUSH 133722869
JE :if_block_0x604000003190
JMP :else_block_0x604000003190

if_block_0x604000003190:       \\ <-- the beginning ob if block
                               \\ <---- input/output started here
PUSH 133722869
OUT                            \\ <-- standart printf

                               \\ <---- input/output finished here

JMP :endif_0x604000003190

else_block_0x604000003190:     \\ <-- the beginning ob else block
                               \\ <---- if construction started here
PUSH [5 + vars_start]          \\ var n_roots
PUSH 1
JE :if_block_0x6040000030d0
JMP :else_block_0x6040000030d0

if_block_0x6040000030d0:       \\ <-- the beginning ob if block
                               \\ <---- input/output started here
PUSH [0 + vars_start]          \\ var a
OUT                            \\ <-- standart printf

                               \\ <---- input/output finished here

JMP :endif_0x6040000030d0

else_block_0x6040000030d0:     \\ <-- the beginning ob else block
                               \\ <---- input/output started here
PUSH [0 + vars_start]          \\ var a
OUT                            \\ <-- standart printf

PUSH [1 + vars_start]          \\ var b
OUT                            \\ <-- standart printf

                               \\ <---- input/output finished here

JMP :endif_0x6040000030d0

endif_0x6040000030d0:          \\ <-- continuation after conditional block
                               \\ <---- if construction finished here

JMP :endif_0x604000003190

endif_0x604000003190:          \\ <-- continuation after conditional block
                               \\ <---- if construction finished here

JMP :endif_0x604000003250

endif_0x604000003250:          \\ <-- continuation after conditional block
                               \\ <---- if construction finished here

                               \\ <---- input/output started here
PIN
POP [0 + vars_start]           \\ <-- standart scanf in var a
                               \\ <---- input/output finished here

                               \\ <---- input/output started here
PIN
POP [1 + vars_start]           \\ <-- standart scanf in var b
                               \\ <---- input/output finished here

                               \\ <---- input/output started here
PIN
POP [2 + vars_start]           \\ <-- standart scanf in var c
                               \\ <---- input/output finished here

JMP :while_0x604000003650

while_else_0x604000003650:     \\ <-- while else block
JMP :end_while_0x604000003650

end_while_0x604000003650:      \\ <-- continuation after while block
                               \\ <---- while finished here

HLT                            \\ end of the programm
